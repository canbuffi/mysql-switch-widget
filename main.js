/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

// Properties set by attributes panel
var updateInterval;

//
// Function: setElementText(elementName, elementValue)
// Set the text contents of an HTML div
//
// elementName: Name of the element in the DOM
// elementValue: Text to display in the element
//
function setElementText(elementName, elementValue)
{
    var element = document.getElementById(elementName);
    if (element) {
        element.innerText = elementValue;
    }
}

//
// Function: setGaugeValue(gaugeId, value)
// Sets the value of one of the monitor gauges
//
// gaugeId: Gauge to set
// value: Value to set gauge to
//
function setGaugeValue (gaugeId, value)
{
    var element = document.getElementById(gaugeId);
    if (element != null && element.object != null && element.object.setValue != null) {
        element.object.setValue(value);
    }
}

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
    
    var socketPath = document.getElementById("socketPath");
    var socketPreference = widget.preferenceForKey("socketPath");
    if (socketPreference == "undefined") {
        widget.setPreferenceForKey("/tmp/mysql.sock", "socketPath");
    }
    socketPath.value = widget.preferenceForKey("socketPath");
    
    // Get the properties
    updateInterval = +attributes.updateInterval;
    if (!updateInterval) {
        updateInterval = 1;
    }
    indicator = document.getElementById("indicator");
    /*
    tooltip = document.getElementById("tooltip");
    indicator.onmouseover = function() {
        duration = 100;	// The length of the animation
        interval = 1;	// How often the animation should change
        start = 0.0;	// The starting value
        finish = 1.0;	// The finishing value
        handler = function(animation, current, start, finish) {
            tooltip.style.opacity = current;
        };
        new AppleAnimator(duration, interval, start, finish, handler).start();
    };
    indicator.onmouseout = function() {
        duration = 100;	// The length of the animation
        interval = 1;	// How often the animation should change
        start = 1.0;	// The starting value
        finish = 0.0;	// The finishing value
        handler = function(animation, current, start, finish) {
            tooltip.style.opacity = current;
        };
        new AppleAnimator(duration, interval, start, finish, handler).start();
    };
    */
    indicator.onclick = toggleMysql;
    window.setInterval("getStatus()", (updateInterval * 2000));
    getStatus();
}

function mysqlIsRunning()
{
    var running = widget.system("./mysql-running.sh " + widget.preferenceForKey("socketPath"), null);
    var output = running.outputString;
    if (output.match(/YES/)) {
        return true;
    } else {
        return false;
    }
}

function getStatus() {
    if (mysqlIsRunning() ==  true) {
        indicator.object.setValue(1);
    } else {
        indicator.object.setValue(2);
    }
} 

function toggleMysql()
{
    if (mysqlIsRunning()) {
        widget.system("/usr/bin/osascript mysql-server.scpt stop", null);
    } else {
        widget.system("/usr/bin/osascript mysql-server.scpt start", null);
    }
    getStatus();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{

}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{

}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display="none";
    back.style.display="block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");
    var socketPath = document.getElementById("socketPath");
    
    widget.setPreferenceForKey(socketPath.value, "socketPath");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget)
{
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}
